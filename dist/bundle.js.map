{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Robot.js","src/app.js","src/main.js"],"names":[],"mappingshIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nvar Robot = function () {\n  this.robot = true;\n  this.model = null;\n  this.type = null;\n};\n\n// types of robots\n\nvar FireBots = function () {\n  this.model = \"Fire Bot\";\n  this.attack = \"Burning things\";\n};\n\nFireBots.prototype = new Robot();\n\nvar WaterBots = function () {\n  this.model = \"Water Bot\";\n  this.attack = \"Watering things\";\n};\n\nWaterBots.prototype = new Robot();\n\nvar TankBots = function () {\n  this.model = \"Tank Bot\";\n  this.attack = \"Exploding things\"\n};\n\nTankBots.prototype = new Robot();\n\n// types of robotos\n\n// firebot types\n\nvar WeldingBot = function () {\n  this.type = \"WeldingBot\";\n  this.name = \"Welding Bot\";\n  this.attack = \"Welding\";\n  this.health = Math.floor(Math.random() * (100 - 80) + 80);\n  this.damage = Math.floor(Math.random() * (20 - 10) + 10);\n};\n\nWeldingBot.prototype = new FireBots();\nlet weldingBot = new WeldingBot();\n\nvar DragonBot = function () {\n  this.type = \"DragonBot\";\n  this.name = \"Dragon Bot\";\n  this.attack = \"Breathing Fire\";\n  this.health = Math.floor(Math.random() * (110 - 90) + 90);\n  this.damage = Math.floor(Math.random() * (25 - 15) + 15);\n};\n\nDragonBot.prototype = new FireBots();\nlet dragonBot = new DragonBot();\n\n// types of waterbots\n\nvar DolphinBot = function () {\n  this.type = \"DolphinBot\";\n  this.name = \"Dolphin Bot\";\n  this.attack = \"splash attack\";\n  this.health = Math.floor(Math.random() * (90 - 70) + 70);\n  this.damage = Math.floor(Math.random() * (35 - 10) + 10);\n};\n\nDolphinBot.prototype = new WaterBots();\nlet dolphinBot = new DolphinBot();\n\nvar CrabBot = function () {\n  this.type = \"CrabBot\";\n  this.name = \"Crab Bot\";\n  this.attack = \"Pinching things\";\n  this.health = Math.floor(Math.random() * (80 - 60) + 60);\n  this.damage = Math.floor(Math.random() * (40 - 10) + 10);\n};\n\nCrabBot.prototype = new WaterBots();\nlet crabBot = new CrabBot();\n\n// types of tank bots\n\nvar BearBot = function () {\n  this.type = \"BearBot\";\n  this.name = \"Bear Bot\";\n  this.attack = \"Bear Hugs\";\n  this.health = Math.floor(Math.random() * (130 - 100) + 100);\n  this.damage = Math.floor(Math.random() * (50 - 10) + 10);\n};\n\nBearBot.prototype = new TankBots();\nlet bearBot = new BearBot();\n\nvar OptimusBot = function () {\n  this.type = \"OptimusBot\";\n  this.name = \"Optimus Bot\";\n  this.attack = \"trucking\";\n  this.health = Math.floor(Math.random() * (120 - 70) + 70);\n  this.damage = Math.floor(Math.random() * (45 - 10) + 10);\n\n};\n\nOptimusBot.prototype = new TankBots();\nlet optimusBot = new OptimusBot();\n\n\nlet botArray = [weldingBot, dragonBot, dolphinBot, crabBot, bearBot, optimusBot];\n\n\nmodule.exports = {\n  WeldingBot, DragonBot, DolphinBot, CrabBot, BearBot, OptimusBot, botArray\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","\"use strict\";\n\nlet BattleBots = require(\"./main\");\nlet Dragon = new BattleBots.Robot.DragonBot();\n\nlet robot1;\nlet robot2;\n\nlet fightRobot1 = $(\"#fightRobot1\");\nlet fightRobot2 = $(\"#fightRobot2\");\n\nlet playerInput1 = $(\"#player1\");\nlet playerInput2 = $(\"#player2\");\n\nlet typeSelects = $(\".robot-options\");\n\nconsole.log(BattleBots.Robot.botArray);\n\n\nfor (let i = 0; i < BattleBots.Robot.botArray.length; i++) {\n  let newTypeOption = $(\"<option>\").attr(\"id\", `${BattleBots.Robot.botArray[i].type}`).html( `${BattleBots.Robot.botArray[i].name}`);\n  typeSelects.append(newTypeOption);\n}\n\nlet fillPlayers = () => {\n  console.log(\"select1\", $(\"#select1 option:selected\").attr(\"id\"));\n  console.log(\"select2\", $(\"#select2 option:selected\").attr(\"id\"));\n  \n  let selectRobot1 = $(\"#select1 option:selected\").attr(\"id\");\n\n  for ( let key in BattleBots.Robot) {\n    if ( key === selectRobot1 ) {\n      robot1 = new BattleBots.Robot[key]();\n    }\n  }\n\n  robot1.playerName = playerInput1.val();\n\n  let selectRobot2 = $(\"#select2 option:selected\").attr(\"id\");\n\n  for ( let key in BattleBots.Robot) {\n    if ( key === selectRobot2 ) {\n      robot2 = new BattleBots.Robot[key]();\n    }\n  }\n    robot2.playerName = playerInput2.val();\n\n    showAttackScreen();\n    fillAttackScreen(robot1, fightRobot1);\n    fillAttackScreen(robot2, fightRobot2);\n};\n\nlet attack = () => {\n  robot1.health = robot1.health - robot2.damage;\n  robot2.health = robot2.health - robot1.damage;\n  fillAttackScreen(robot1, fightRobot1);\n  fillAttackScreen(robot2, fightRobot2);\n  if (robot1.health <= 0) {\n    winnerAnnouncement(robot2);\n  } else if (robot2.health <= 0) {\n    winnerAnnouncement(robot1);\n  }\n};\n\nlet winnerAnnouncement = (robot) => {\n  $(\"#attackButton\").attr(\"disabled\", true);\n  $(\"#winner\").html(`The winner is ${robot.playerName} with the ${robot.name} using ${robot.attack}`);\n};\n\nlet fillAttackScreen = (robot, robotBox) => {\n  robotBox.empty();\n  let playerName = $(\"<h2>\").html(`Player Name: ${robot.playerName}`);\n  let robotType = $(\"<h3>\").html(`Robot Type: ${robot.name}`);\n  let robotHealth = $(\"<h4>\").html(`Robot Health: ${robot.health}`);\n  let robotAttack = $(\"<h4>\").html(`Attack: ${robot.attack}`);\n  let robotDamage = $(\"<h4>\").html(`Damage: ${robot.damage}`);\nrobotBox.append(playerName, robotType, robotHealth, robotAttack, robotDamage);\n\n}\n//  switch to attack screen\nlet showAttackScreen = () => { \n  $(\"#attackButton\").removeClass(\"hidden\");\n  $(\"#fightReady\").addClass(\"hidden\");\n  $(\"#makeRobot1\").addClass(\"hidden\");\n  $(\"#makeRobot2\").addClass(\"hidden\");\n}\n\n\nlet fightReady = $(\"#fightReady\").click(fillPlayers);\nlet attackButton = $(\"#attackButton\").click(attack);\n\n\n\n\n\n\n\n\n","\"use strict\";\n\nlet Robot = require(\"./Robot\");\n\nmodule.exports = {\n  Robot\n}\n\n\n\n\n\n\n\n"]}